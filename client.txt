const dgram = require("dgram");
const crypto = require("crypto");

const client = dgram.createSocket("udp4");
const MULTICAST_ADDR = "239.255.255.250";
const PORT = 5000;

// Chave simÃ©trica (DEVE SER IGUAL Ã  do servidor)
const chaveSimetrica = Buffer.from("CHAVE-SIMETRICA-32-BYTES-AQUI", "utf-8");

// FunÃ§Ã£o para descriptografar mensagens
function descriptografarMensagem(mensagem) {
    const partes = mensagem.split(":");
    const iv = Buffer.from(partes[0], "hex");
    const encryptedText = Buffer.from(partes[1], "hex");

    const decipher = crypto.createDecipheriv("aes-256-cbc", chaveSimetrica, iv);
    let decrypted = decipher.update(encryptedText, "hex", "utf-8");
    decrypted += decipher.final("utf-8");
    return JSON.parse(decrypted);
}

// Escutar mensagens multicast
client.on("message", (msg) => {
    try {
        const mensagem = descriptografarMensagem(msg.toString());
        
        if (mensagem.type === "imagem") {
            console.log(`ðŸ“· Imagem recebida: ${mensagem.data}`);
        } else if (mensagem.type === "lance") {
            console.log(`Novo lance: ${mensagem.usuario} - R$ ${mensagem.valor}`);
        } else if (mensagem.type === "encerrar") {
            console.log(`ðŸ”´ LeilÃ£o encerrado! Ganhador: ${mensagem.vencedor}`);
        }
    } catch (error) {
        console.error("Erro ao descriptografar:", error.message);
    }
});

// Participar do grupo multicast
client.bind(PORT, () => {
    client.addMembership(MULTICAST_ADDR);
    console.log(`ðŸ“¡ Escutando mensagens multicast em ${MULTICAST_ADDR}:${PORT}`);
});

// FunÃ§Ã£o para enviar lances
function enviarLance(usuario, valor) {
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv("aes-256-cbc", chaveSimetrica, iv);
    let encrypted = cipher.update(JSON.stringify({ type: "lance", usuario, valor }), "utf-8", "hex");
    encrypted += cipher.final("hex");

    const mensagem = iv.toString("hex") + ":" + encrypted;
    client.send(mensagem, PORT, MULTICAST_ADDR);
}

// Teste: enviar lance apÃ³s 5 segundos
setTimeout(() => {
    enviarLance("Cliente1", Math.floor(Math.random() * 500) + 1);
}, 5000);
