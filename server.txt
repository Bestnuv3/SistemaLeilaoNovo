const dgram = require("dgram");
const crypto = require("crypto");

const server = dgram.createSocket("udp4");
const MULTICAST_ADDR = "239.255.255.250";
const PORT = 5000;

let ultimoLance = { usuario: "Nenhum", valor: 0 };
let leilaoAtivo = true;

// Gera chave simÃ©trica para criptografia
const chaveSimetrica = crypto.randomBytes(32); // AES-256 requer 32 bytes

// FunÃ§Ã£o para criptografar mensagens
function criptografarMensagem(mensagem) {
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv("aes-256-cbc", chaveSimetrica, iv);
    let encrypted = cipher.update(JSON.stringify(mensagem), "utf-8", "hex");
    encrypted += cipher.final("hex");
    return iv.toString("hex") + ":" + encrypted;
}

// Enviar imagem inicial
function enviarImagem() {
    const mensagem = criptografarMensagem({ type: "imagem", data: "imagem-atual.jpg" });
    server.send(mensagem, PORT, MULTICAST_ADDR);
}

// Processar lances recebidos
server.on("message", (msg, rinfo) => {
    const partes = msg.toString().split(":");
    const iv = Buffer.from(partes[0], "hex");
    const encryptedText = Buffer.from(partes[1], "hex");

    try {
        const decipher = crypto.createDecipheriv("aes-256-cbc", chaveSimetrica, iv);
        let decrypted = decipher.update(encryptedText, "hex", "utf-8");
        decrypted += decipher.final("utf-8");
        const mensagem = JSON.parse(decrypted);

        if (mensagem.type === "lance" && leilaoAtivo) {
            ultimoLance = { usuario: mensagem.usuario, valor: mensagem.valor };
            console.log(`Novo lance de ${mensagem.usuario}: R$ ${mensagem.valor}`);

            const resposta = criptografarMensagem({
                type: "lance",
                usuario: ultimoLance.usuario,
                valor: ultimoLance.valor,
            });

            server.send(resposta, PORT, MULTICAST_ADDR);
        }
    } catch (error) {
        console.error("Erro ao descriptografar:", error.message);
    }
});

// Encerrar o leilÃ£o apÃ³s 1 minuto
setTimeout(() => {
    leilaoAtivo = false;
    console.log(`LeilÃ£o encerrado! Ganhador: ${ultimoLance.usuario} com R$ ${ultimoLance.valor}`);
    const mensagem = criptografarMensagem({ type: "encerrar", vencedor: ultimoLance.usuario });
    server.send(mensagem, PORT, MULTICAST_ADDR);
}, 60000);

// Configurar servidor multicast
server.bind(PORT, () => {
    server.addMembership(MULTICAST_ADDR);
    console.log(`ðŸ“¡ Servidor multicast escutando em ${MULTICAST_ADDR}:${PORT}`);
    enviarImagem();
});
